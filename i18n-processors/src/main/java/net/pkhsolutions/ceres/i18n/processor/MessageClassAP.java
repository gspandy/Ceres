/*
 * Copyright (c) 2012 Petter Holmström
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.pkhsolutions.ceres.i18n.processor;

import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.PackageElement;
import javax.tools.FileObject;
import javax.tools.JavaFileObject;
import net.pkhsolutions.ceres.i18n.annotations.Message;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;
import org.apache.velocity.app.VelocityEngine;

/**
 * This is an annotation processor that creates a {@code Bundle} class for each {@code messages.properties} file
 * generated by {@link MessageBundleAP}. Clients should never use this class directly.
 *
 * @author Petter Holmström
 * @since 1.0∫
 */
@SupportedAnnotationTypes({"net.pkhsolutions.ceres.i18n.annotations.Message", "net.pkhsolutions.ceres.i18n.annotations.Messages"})
@SupportedSourceVersion(SourceVersion.RELEASE_6)
public final class MessageClassAP extends AbstractMessageAP {

    private final VelocityEngine velocityEngine;
    private final Template bundleTemplate;

    public MessageClassAP() {
        final URL velocityPropertyBundle = getClass().getClassLoader().getResource("net/pkhsolutions/ceres/i18n/processor/velocity.properties");
        final Properties velocityProperties = new Properties();
        try {
            velocityProperties.load(velocityPropertyBundle.openStream());
        } catch (final IOException e) {
            throw new RuntimeException("Could not load velocity properties", e);
        }
        velocityEngine = new VelocityEngine(velocityProperties);
        bundleTemplate = velocityEngine.getTemplate("net/pkhsolutions/ceres/i18n/processor/bundle.vm");
    }

    @Override
    protected void process(final Map<PackageElement, List<Message>> messages) {
        for (final PackageElement pkg : messages.keySet()) {
            generateBundleClassForPackage(pkg);
        }
    }

    private void generateBundleClassForPackage(PackageElement pkg) {
        final String packageName = pkg.getQualifiedName().toString();
        final VelocityContext vc = new VelocityContext();
        vc.put("generationDate", new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(new Date()));
        vc.put("packageName", packageName);

        try {
            final Properties props = new Properties();
            final FileObject bundleFO = getBundleForReading(pkg);
            if (bundleFO.getLastModified() > 0) {
                final InputStream bundleIS = bundleFO.openInputStream();
                props.load(bundleIS);
                bundleIS.close();
            }
            
            vc.put("properties", props.stringPropertyNames());
            JavaFileObject jfo = processingEnv.getFiler().createSourceFile(pkg.getQualifiedName().toString() + ".Bundle");
            Writer writer = jfo.openWriter();
            bundleTemplate.merge(vc, writer);
            writer.close();
        } catch (IOException e) {
            throw new RuntimeException("Could not create source file", e);
        }
    }
}
