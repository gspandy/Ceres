/*
 * Copyright (c) 2012 Petter Holmström
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.pkhsolutions.ceres.i18n.processor;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.*;
import javax.annotation.processing.*;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.PackageElement;
import javax.lang.model.element.TypeElement;
import javax.tools.FileObject;
import javax.tools.StandardLocation;
import net.pkhsolutions.ceres.i18n.annotations.Message;
import net.pkhsolutions.ceres.i18n.annotations.Messages;

/**
 * This is an annotation processor that goes through {@link Message} and {@link Messages}
 * annotations and compiles {@code messages.properties}-files for each package.
 *
 * @author Petter Holmström
 * @since 1.0
 */
@SupportedAnnotationTypes({"net.pkhsolutions.ceres.i18n.annotations.Message", "net.pkhsolutions.ceres.i18n.annotations.Messages"})
@SupportedSourceVersion(SourceVersion.RELEASE_6)
public class MessageBundleAP extends AbstractProcessor {

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        final HashMap<PackageElement, List<Message>> messages = new HashMap<PackageElement, List<Message>>();
        for (final Element element : roundEnv.getElementsAnnotatedWith(Message.class)) {
            addMessageToMap(element.getAnnotation(Message.class), getPackage(element), messages);
        }
        for (final Element element : roundEnv.getElementsAnnotatedWith(Messages.class)) {
            final PackageElement pkg = getPackage(element);
            for (Message message : element.getAnnotation(Messages.class).value()) {
                addMessageToMap(message, pkg, messages);
            }
        }
        process(messages);
        return false;
    }

    private void addMessageToMap(final Message message, final PackageElement pkg, final Map<PackageElement, List<Message>> messages) {
        List<Message> list = messages.get(pkg);
        if (list == null) {
            list = new LinkedList<Message>();
            messages.put(pkg, list);
        }
        list.add(message);
    }

    private void process(final Map<PackageElement, List<Message>> messages) {
        for (final PackageElement pkg : messages.keySet()) {
            try {
                final FileObject destination = getBundleForPackage(pkg);
                final Properties props = new Properties();
                if (destination.getLastModified() > 0) {
                    final InputStream in = destination.openInputStream();
                    props.load(in);
                    in.close();
                }
                // TODO Line breaks?
                for (final Message message : messages.get(pkg)) {
                    props.put(message.key(), message.defaultValue());
                }
                final OutputStream out = destination.openOutputStream();
                props.store(out, "Auto-generated by net.pkhsolutions.ceres.i18n.processor.MessageBundleAP");
                out.close();
            } catch (final IOException e) {
                throw new RuntimeException("Could not write to bundle file", e);
            }
        }
    }

    private PackageElement getPackage(final Element type) {
        if (type == null) {
            return null;
        } else if (type.getEnclosingElement().getKind() == ElementKind.PACKAGE) {
            return (PackageElement) type.getEnclosingElement();
        } else {
            return getPackage(type.getEnclosingElement());
        }
    }

    private FileObject getBundleForPackage(final PackageElement pkg) throws IOException {
        final Filer filer = processingEnv.getFiler();
        final String packageName = pkg.getQualifiedName().toString();
        final String fileName = "messages.properties";
        try {
            return filer.createResource(StandardLocation.SOURCE_OUTPUT, packageName, fileName);
        } catch (IOException e) {
            return filer.getResource(StandardLocation.SOURCE_OUTPUT, packageName, fileName);
        }
    }
}
