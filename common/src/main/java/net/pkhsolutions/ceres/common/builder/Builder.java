/*
 * Copyright (c) 2012 Petter Holmström
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.pkhsolutions.ceres.common.builder;

/**
 * This interface is implemented by the builder classes generated by the
 * annotation processor. The builder will also include setter methods for each
 * attribute in the buildable class. The setter methods will return the builder
 * instance to allow chaining, e.g.
 * <code>MyBuilder setMyAttribute(String vaue)</code>.
 *
 * @see Buildable
 *
 * @author Petter Holmström
 * @since 1.0
 * @param <T> the type of objects built by this builder.
 * @param <B> the type of the builder itself.
 */
public interface Builder<T, B extends Builder<T, B>> {

    /**
     * Creates a new instance of the buildable class and populates it with the
     * data currently stored in the builder. This method can be invoked multiple
     * times.
     *
     * @return a new instance of the buildable class, never null.
     */
    T build();

    /**
     * Initializes the builder with data from the specified original. Invoking
     * <code>builder.deriveFrom(myObject).build()</code> will effectively create
     * a copy of
     * <code>myObject</code>.
     *
     * @param original the original to derive from, must not be null.
     * @return the builder instance, to allow chaining.
     */
    B deriveFrom(T original);
}
